#!/usr/bin/env ruby

require "bundler/setup"
# First, build the extension by running `make`
# this is a big mess, just a bunch of random stuff to test out.

require_relative './../ext/crystalized_ruby'
class String
  def cr_blank?
    empty? || cr_blank
  end
end




puts '~~~~~~~~~~ type checking ~~~~~~~~~'

puts :symbol.cr_boomerang.inspect
puts '~~~~~~~~~~ numbers ~~~~~~~~~'
puts 1.cr_boomerang
puts 1.23.class.to_s
puts 1.23.cr_boomerang
puts -1.cr_boomerang
puts 4321.cr_boomerang
puts 0.cr_boomerang
puts 3.14159265358.cr_square


puts '~~~~~~~~~~ non-ascii ~~~~~~~~~'
puts "¿por qué?".cr_boomerang
puts "Fred’s".cr_boomerang
puts "Fred`s".cr_boomerang
puts "Fred`s".encoding

puts '~~~~~~~~~~ regex ~~~~~~~~~'
puts String.cr_inspect
puts Regexp.cr_inspect
puts 'inspect_string'.cr_class
puts 12.cr_class
puts 12.cr_boomerang
puts /foo/.cr_class

puts 'regex time'
re = /fo:o\d+/i
puts re.to_s
puts re.options
puts 'crystal version'
cr = re.cr_boomerang
puts cr
puts cr.options
puts "equal? #{cr == re}"
puts "equal? #{/fo:o\d+/i == /fo:o\d+/i}"

puts "regex?\n\n"
re = /world/
puts re.cr_boomerang
puts "Hello World!".gsub(re.cr_regex, 'Paul')
puts "\n\nregex!!!"

re = /fo:o\d+/i
puts "ruby: #{re.to_s} crystal: #{re.cr_boomerang}"
re = "some string"
puts "ruby: #{re.to_s} crystal: #{re.cr_boomerang}"
puts "\n\n\n"
puts '~~~~~~~~~~ true/false/nil ~~~~~~~~~'
puts nil.cr_boomerang   == nil
puts true.cr_boomerang  == true
puts false.cr_boomerang == false
puts '~~~~~~~~~~ cr_array       ~~~~~~~~~'
puts 1.cr_boomerang
arr = [1,2,3,4, "str"]
puts arr.cr_boomerang.inspect + ' did it work?'
puts arr.inspect
arr = []
puts arr.cr_boomerang.inspect
puts arr.inspect

puts '^^^^^^^^^^ type checking ^^^^^^^^^'

str_squish = " foo   bar    \n   \t   boo"
puts str_squish.cr_squish
puts ' '.cr_blank?
puts 'string_to_sym'.cr_intern.inspect

puts 12.cr_ordinal

crm = CrMath.new
puts crm.add(2,3) + 2
puts crm.fibonacci(10)

puts '~~~~~~~~~ class < module ~~~~~~~~~~'
g = Geode::Stuff.new
puts g.salute('world')
puts g.cr_hash.inspect
puts g.cr_array.inspect


puts '~~~~~~~~~ misc ~~~~~~~~~~'



h = { 'key_1' => 'val_1', 'key_2' => 'val_2', 'key_12' => 12, 'key_true' => true, 'key_false' => false }

puts h.to_cr


exit
require 'active_support/all'
require 'fast_blank'


str = ARGV[0]
# g = Geode.new
# puts g.salute(str || 'world')
# puts ARGV[0].to_s.cr_blank
num = rand(20)
# puts "#{num.to_s}#{g.cr_ordinal(num)}"


squish = " foo   bar    \n   \t   boo"
# puts squish.cr_squish

crm = CrMath.new
# puts crm.add(2,3) + 2
# puts crm.fibonacci(10)


# double check
# puts '---------- double check---------------'
# puts (0..100).to_a.all? { |i| num.ordinal == g.cr_ordinal(num) }

class Integer
  def ordinal
    'th'
  end
end


puts 1.ordinal

exit

require 'descriptive_statistics'

# playing around to see memory consumption/leakage

str ||= 'world'
count = 1_000_000_000
count = 100_000_000
timing = []
# puts 'AS blank?'
# puts 'fast blank?'
puts 'crystal blank?'
# puts 'crystal squish'
# puts 'AS squish'
tt = Time.now
count.times do |i|
  # print "#{i}/#{count} in #{dur = (Time.now - t).round(2)}\r"
  # g.salute(str)
  t = Time.now
  # " ".blank?
  " ".cr_blank?
  # " ".cr_squish
  # " ".squish
  t2 = Time.now
  timing << (t2 - t)
end
puts "script time: #{(duration = Time.now - tt)}"
puts "count: #{count}"
puts "n/second: #{(count / duration).round}"
puts "max duration: #{timing.max}"
total_time = timing.inject(:+)
avg_time = total_time / timing.size
puts "avg_time: #{avg_time}"
above = timing.count{ |d| d > avg_time }
puts "above average: #{above}"
puts "stdev: #{timing.standard_deviation}"
puts
